<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <packaging>jar</packaging>
    <groupId>com.vaadin</groupId>
    <artifactId>base-starter-connect</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Vaadin Connect Starter</name>
    <description>Vaadin Connect Starter</description>
    <url>http://vaadin.com</url>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <repositories>
        <!-- The order of definitions matters. Explicitly defining central here to make sure it has the highest priority. -->
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <!-- The current version of vaadin-connect is a pre-release version, so vaadin-prereleases repository is needed. -->
        <repository>
            <id>vaadin-prereleases</id>
            <url>
                http://maven.vaadin.com/vaadin-prereleases/
            </url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <!-- The snapshot repository is needed when people want to test the starter with the latest snapshot of vaadin-connect. -->
        <repository>
            <id>vaadin-snapshots</id>
            <url>
                https://oss.sonatype.org/content/repositories/vaadin-snapshots/
            </url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>vaadin-prereleases</id>
            <url>
                http://maven.vaadin.com/vaadin-prereleases/
            </url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>vaadin-snapshots</id>
            <url>
                https://oss.sonatype.org/content/repositories/vaadin-snapshots/
            </url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8
        </project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <vaadin.connect.version>0.5.1</vaadin.connect.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-connect</artifactId>
            <version>${vaadin.connect.version}</version>
        </dependency>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-frontend-server</artifactId>
            <version>${vaadin.connect.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security.oauth.boot</groupId>
            <artifactId>spring-security-oauth2-autoconfigure</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-connect-maven-plugin</artifactId>
                <version>${vaadin.connect.version}</version>
                <executions>
                    <execution>
                        <!--Steps for generating Vaadin Connect helpers for the application-->
                        <id>vaadin-connect-resources</id>
                        <goals>
                            <!--Generates Open Api v3 spec, happens on process-sources phase by default-->
                            <goal>generate-openapi-spec</goal>
                            <!--Generates the default Vaadin Connect client for sending requests to Vaadin Connect services, happens on generate-resources phase by default-->
                            <goal>generate-vaadin-client</goal>
                            <!--Generates Vaadin Connect services' modules to ease their method access, happens on generate-resources phase by default-->
                            <goal>generate-connect-modules</goal>
                        </goals>
                    </execution>
                </executions>
                <!--
                    Here are the configurable parameters with their default values:

                    * The target file for the open api spec to be generated to
                    <openApiJsonFile>${project.build.directory}/generated-resources/openapi.json</openApiJsonFile>

                    * The target directory for the client and modules javascript files generated by the plugin
                    <generatedFrontendDirectory>${project.basedir}/frontend/generated/</generatedFrontendDirectory>

                    * The properties file to read the Vaadin Connect properties from, defaults will be used when no file provided
                    <applicationProperties>${project.basedir}/src/main/resources/application.properties</applicationProperties>

                    Include them with the overridden values into the <configuration> section of the plugin
                -->
            </plugin>

            <!--
                Watch for the source file changes and recompile the Java classes. This allows to
                * regenerate the Open Api v3 spec and the Vaadin Connect services' modules (because we've added the vaadin-connect-maven-plugin and corresponding goals)
                * recompile the sources so that a Spring Boot app restarts with the updated code

                Keep in mind that the watcher plugin should be started separately, since it's a separate project, use
                mvn fizzed-watcher:run or ./mvnw fizzed-watcher:run to run it from Maven or use the npm script that starts it automatically
            -->
            <plugin>
                <groupId>com.fizzed</groupId>
                <artifactId>fizzed-watcher-maven-plugin</artifactId>
                <version>1.0.6</version>
                <configuration>
                    <watches>
                        <watch>
                            <directory>src/main/java</directory>
                        </watch>
                    </watches>
                    <goals>
                        <goal>compile</goal>
                    </goals>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>
                        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
                    </jvmArguments>
                </configuration>
                <executions>
                    <!-- Start spring-boot before running frontend integration tests and stop after that -->
                    <execution>
                        <id>start-backend-server</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-backend-server</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <!-- Build frontend production bundle -->
                    <execution>
                        <id>build-frontend</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>build:frontend</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- Run frontend unit tests -->
                    <execution>
                        <id>run-frontend-unit-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>test:unit</argument>
                            </arguments>
                            <skip>${skipTests}</skip>
                        </configuration>
                    </execution>

                    <!-- Run frontend IT tests -->
                    <execution>
                        <id>run-frontend-it-tests</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>npm</executable>
                            <arguments>
                                <argument>run</argument>
                                <argument>test:e2e</argument>
                            </arguments>
                            <skip>${skipTests}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- Install frontend NPM packages if not done yet -->
        <profile>
            <id>npm-install</id>
            <activation>
                <file><missing>node_modules</missing></file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>npm-install</id>
                                <phase>validate</phase>
                                <goals><goal>exec</goal></goals>
                                <configuration>
                                    <executable>npm</executable>
                                    <arguments>
                                        <argument>install</argument>
                                        <argument>--loglevel</argument>
                                        <argument>info</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
